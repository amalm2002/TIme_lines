<%- include('../layout/admin/header') %>

    <style>
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 0 20px;
        }

        .returned-orders-container {
            max-width: 900px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            gap: 20px;
            padding: 0 20px;
        }


        .order-card {
            display: flex;
            flex-direction: row;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .product-image {
            flex: 0 0 150px;
            margin-right: 20px;
        }

        .product-image img {
            width: 100%;
            height: 150px;
            border-radius: 4px;
            object-fit: cover;
        }

        .order-details {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .user-info {
            margin-bottom: 10px;
        }

        .user-info h2 {
            margin-bottom: 5px;
            font-size: 1.2em;
        }

        .address {
            font-size: 0.9em;
            color: #666;
        }

        .product-info {
            margin-bottom: 15px;
        }

        .product-info h3 {
            margin-bottom: 5px;
            font-size: 1.1em;
        }

        .product-info p {
            margin: 2px 0;
        }


        .return-reason {
            margin-bottom: 15px;
        }

        .return-reason label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .return-reason textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
            min-height: 80px;
        }


        .action-buttons {
            display: flex;
            justify-content: flex-start;
            gap: 10px;
        }

        .action-buttons button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.1s;
            font-weight: bold;
        }

        .accept {
            background-color: #4CAF50;
        }

        .reject {
            background-color: #f44336;
        }

        .action-buttons button:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        .action-buttons button:active {
            transform: translateY(0);
        }


        @media (max-width: 768px) {
            .order-card {
                flex-direction: column;
            }

            .product-image {
                flex: 0 0 auto;
                margin-right: 0;
                margin-bottom: 15px;
            }

            .product-image img {
                height: auto;
            }

            .action-buttons {
                justify-content: space-between;
            }

            .action-buttons button {
                flex: 1;
            }
        }
    </style>

    <body>
        <header>
            <h1>Returned Orders</h1>
        </header>
        <main class="returned-orders-container">
            <% if (productItem) { %>
                <div class="order-summary">
                    <h1>Order Details</h1>
                    <div class="user-info">
                        <h2>User: <%= order.userName %></h2>
                        <p class="address">
                            Address: <%= order.billingAddress[0].street %>, <%= order.billingAddress[0].city %>, <%= order.billingAddress[0].country %>
                        </p>
                    </div>
                    <div class="order-info">
                        <p class="total-quantity">Total Quantity: <%= order.totalQuantity %></p>
                        <p class="total-amount">Total Amount: ₹<%= order.totalPrice %></p>
                        <p class="paymentMethod">Payment Method: <%= order.paymentMethod %></p>
                        <p class="date-ordered">Date Ordered: <%= new Date(order.dateOrdered).toLocaleDateString() %></p>
                    </div>
                </div>
        
                <!-- Display product-specific details -->
                <div class="returned-products">
                    <h2>Returned Product</h2>
                    <div class="order-card">
                        <div class="product-image">
                            <% if (productItem.productId.images && productItem.productId.images.length > 0) { %>
                                <img src="/images/products/<%= productItem.productId.images[0] %>" alt="<%= productItem.productName %>">
                            <% } else { %>
                                <p>No image available</p>
                            <% } %>
                        </div>
                        <div class="order-details">
                            <div class="product-info">
                                <h3><%= productItem.productName %></h3>
                                <p class="price">₹<%= productItem.total %></p>
                                <p class="quantity">Quantity: <%= productItem.quantity %></p>
                            </div>
                            <div class="return-reason">
                                <label for="reason">Return Reason:
                                    <p style="font-weight: 300;"><%= productItem.returnReason %></p>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
        
                <!-- Display action buttons for the specific product -->
                <div class="action-buttons">
                    <button class="accept" id="acceptBtn" data-order-id="<%= order._id %>" data-product-id="<%= productItem.productId._id %>">Accept</button>
                    <button class="reject" id="rejectBtn" data-order-id="<%= order._id %>" data-product-id="<%= productItem.productId._id %>">Reject</button>
                </div>
            <% } else { %>
                <p>No product with return request found.</p>
            <% } %>
        </main>
        
        
        
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>

            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.accept').forEach(button => {
                    button.addEventListener('click', async function () {
                        const orderId = this.getAttribute('data-order-id');
                        const productId = this.getAttribute('data-product-id');
                        const reasonAcceptStatus = 'Returned';

                        try {
                            const response = await fetch('/admin/RetrunProductStatus', {
                                method: 'post',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ orderId, productId, reasonAcceptStatus })
                            });
                            const result = await response.json();

                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: 'Return request accepted successfully!',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                                setTimeout(() => {
                                    window.location.href = '/admin/orderPage';
                                }, 1500);
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Failed to update the status',
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An error occurred.',
                            });
                            console.error('Error in accepting return request:', error);
                        }
                    });
                });

                document.querySelectorAll('.reject').forEach(rejectButton => {
                    rejectButton.addEventListener('click', async function () {
                        const orderId = this.getAttribute('data-order-id');
                        const productId = this.getAttribute('data-product-id');
                        const reasonRejectedStatus = 'Rejected';

                        try {
                            const response = await fetch('/admin/rejectRetrunProductStatus', {
                                method: 'post',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ orderId, productId, reasonRejectedStatus })
                            });
                            const result = await response.json();

                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: 'Return request rejected successfully!',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                                setTimeout(() => {
                                    window.location.href = '/admin/orderPage';
                                }, 1500);
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Failed to reject the status',
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An error occurred.',
                            });
                            console.error('Error in rejecting return request:', error);
                        }
                    });
                });
            });


        </script>
    </body>

    </html>