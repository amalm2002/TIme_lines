<!-- include header -->
<%- include('../layout/admin/header') %>
    <!-- include header -->
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
            margin: -15px;
        }

        .col-md-4 {
            flex: 0 0 33.333333%;
            max-width: 33.333333%;
            padding: 15px;
        }

        h3 {
            margin-bottom: 20px;
            font-size: 1.5rem;
            color: #040404;
            font-weight: 700;
            text-transform: uppercase;
        }

        .product-list,
        .category-list,
        .brand-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .product-item,
        .category-item,
        .brand-item {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .product-item {
            display: flex;
            align-items: center;
        }

        .product-image img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
            margin-right: 15px;
        }

        .product-info h4,
        .category-item h4,
        .brand-item h4 {
            margin: 0 0 10px;
            font-size: 1.1rem;
            color: #007bff;
        }

        .price {
            font-weight: bold;
            color: #28a745;
        }

        .original-price {
            text-decoration: line-through;
            color: #6c757d;
            margin-left: 10px;
            font-size: 0.9em;
        }

        .chart-controls {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            margin: 20px auto;
        }

        .chart-controls h2 {
            color: #333;
            margin-bottom: 20px;
            text-align: center;
            font-size: 1.8rem;
        }

        .control-group {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .select-wrapper {
            flex: 0 0 48%;
        }

        .select-wrapper label {
            display: block;
            margin-bottom: 5px;
            color: #555;
            font-weight: bold;
        }

        .styled-select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: white;
            font-size: 1rem;
            color: #333;
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='%23333' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: calc(100% - 10px) center;
        }

        .date-range-picker {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .date-input {
            flex: 0 0 48%;
        }

        .date-input label {
            display: block;
            margin-bottom: 5px;
            color: #555;
            font-weight: bold;
        }

        .date-input input[type="date"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            color: #333;
        }

        .update-btn {
            display: block;
            width: 100%;
            padding: 12px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .update-btn:hover {
            background-color: #0056b3;
        }

        @media (max-width: 480px) {

            .control-group,
            .date-range-picker {
                flex-direction: column;
            }

            .select-wrapper,
            .date-input {
                flex: 0 0 100%;
                margin-bottom: 15px;
            }
        }
    </style>
    <!-- Begin Page Content -->
    <div class="container-fluid">
        <!-- Generate Report Button -->
        <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
            <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm" data-toggle="modal"
                data-target="#reportModal">
                <i class="fas fa-download fa-sm text-white-50"></i> Generate Report
            </a>
        </div>

        <!-- Modal Structure -->
        <div class="modal fade" id="reportModal" tabindex="-1" role="dialog" aria-labelledby="reportModalLabel"
            aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reportModalLabel">Generate Sales Report</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <!-- Report Options -->
                        <form id="reportForm">
                            <div class="form-group">
                                <label for="reportType">Report Type</label>
                                <select class="form-control" id="reportType">
                                    <option value="daily">Daily</option>
                                    <option value="weekly">Weekly</option>
                                    <option value="yearly">Yearly</option>
                                    <option value="custom">Custom Date Range</option>
                                </select>
                            </div>
                            <div class="form-group" id="customDateRange" style="display:none;">
                                <label for="startDate">Start Date</label>
                                <input type="date" class="form-control" id="startDate">
                                <label for="endDate" class="mt-2">End Date</label>
                                <input type="date" class="form-control" id="endDate">
                            </div>
                            <div class="form-group">
                                <label for="filterType">Filter By</label>
                                <select class="form-control" id="filterType">
                                    <option value="day">1 Day</option>
                                    <option value="week">1 Week</option>
                                    <option value="month">1 Month</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="downloadFormat">Download Format</label>
                                <select class="form-control" id="downloadFormat">
                                    <option value="pdf">PDF</option>
                                    <option value="excel">Excel</option>
                                </select>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="generateReport">Generate Report</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="chart-controls">
            <h2>Order Statistics Chart</h2>
            <div class="control-group">
                <div class="select-wrapper">
                    <label for="time-period">Time Period:</label>
                    <select id="time-period" class="styled-select">
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="yearly">Yearly</option>
                        <option value="custom">Custom Date Range</option>
                    </select>
                </div>

                <div class="select-wrapper">
                    <label for="filter-type">Filter:</label>
                    <select id="filter-type" class="styled-select">
                        <option value="orders">Order Count</option>
                        <option value="sales">Sales Amount</option>
                    </select>
                </div>
            </div>

            <div id="custom-date-range" class="date-range-picker" style="display: none;">
                <div class="date-input">
                    <label for="start-date">Start Date:</label>
                    <input type="date" id="start-date">
                </div>

                <div class="date-input">
                    <label for="end-date">End Date:</label>
                    <input type="date" id="end-date">
                </div>
            </div>

            <button id="update-chart" class="update-btn">Update Chart</button>
        </div>
        

        <canvas id="ordersChart" width="200" height="100"></canvas>

        <div class="chart-controls">
            <h2>Profit Over Time</h2>
            <button id="update-profit-chart">Update Profit Chart</button>
        </div>
        
        <!-- Profit Chart -->
        <canvas id="profitChart" width="400" height="200"></canvas>


        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


        <!-- Content Row -->
        <div class="container">
            <div class="row">
                <!-- Top 5 Selling Products -->
                <div class="col-md-4">
                    <h3>Top 5 Selling Products</h3>
                    <ul class="product-list">
                        <% topSellingProducts.forEach(product=> { %>
                            <li class="product-item">
                                <div class="product-image">
                                    <img src="/images/products/<%= product.productImage %>"
                                        alt="<%= product.productName %>">
                                </div>
                                <div class="product-info">
                                    <h4>
                                        <%= product.productName %>
                                    </h4>
                                    <p>Sold: <%= product.totalSale %> units</p>
                                    <% if (product.offerPrice) { %>
                                        <p class="price">
                                            Offer Price: ₹<%= product.offerPrice %>
                                                <span class="original-price">₹<%= product.price %></span>
                                        </p>
                                        <% } else { %>
                                            <p class="price">Price: ₹<%= product.price %>
                                            </p>
                                            <% } %>
                                </div>
                            </li>
                            <% }) %>
                    </ul>
                </div>

                <!-- Top Selling Categories -->
                <div class="col-md-4">
                    <h3>Top Selling Categories</h3>
                    <% if (topSellingCategories && topSellingCategories.length> 0) { %>
                        <ul class="category-list">
                            <% topSellingCategories.forEach(category=> { %>
                                <li class="category-item">
                                    <h4>
                                        <%= category.categoryName %>
                                    </h4>
                                    <p>Sold: <%= category.totalSale %> units</p>
                                </li>
                                <% }) %>
                        </ul>
                        <% } else { %>
                            <p>No top-selling categories available.</p>
                            <% } %>
                </div>

                <!-- Top Selling Brands -->
                <div class="col-md-4">
                    <h3>Top Selling Brands</h3>
                    <% if (topSellingBrands && topSellingBrands.length> 0) { %>
                        <ul class="brand-list">
                            <% topSellingBrands.forEach(brand=> { %>
                                <li class="brand-item">
                                    <h4>
                                        <%= brand.brandName %>
                                    </h4>
                                    <p>Sold: <%= brand.totalSold %> units</p>
                                </li>
                                <% }) %>
                        </ul>
                        <% } else { %>
                            <p>No top-selling brands available.</p>
                            <% } %>
                </div>
            </div>
        </div>



        <!-- Scroll to Top Button-->
        <a class="scroll-to-top rounded" href="#page-top">
            <i class="fas fa-angle-up"></i>
        </a>

        <!-- Logout Modal-->
        <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
            aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                        <a class="btn btn-primary" href="/admin/logout">Logout</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bootstrap core JavaScript-->
        <script src="/vendor/jquery/jquery.min.js"></script>
        <script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

        <!-- Custom scripts for all pages-->
        <script src="/js/sb-admin-2.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <script>
            document.getElementById('reportType').addEventListener('change', function () {
                const reportType = document.getElementById('reportType').value;
                const customDateRange = document.getElementById('customDateRange');

                if (reportType === 'custom') {
                    customDateRange.style.display = 'block';
                } else {
                    customDateRange.style.display = 'none';
                }
            });

            document.getElementById('generateReport').addEventListener('click', function () {
                const reportType = document.getElementById('reportType').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                const downloadFormat = document.getElementById('downloadFormat').value;

                if (reportType === 'custom') {
                    if (!startDate || !endDate) {
                        alert('Please select both start and end dates.');
                        return;
                    }

                    if (new Date(endDate) < new Date(startDate)) {
                        alert('End date cannot be before start date.');
                        return;
                    }
                }

                fetch('/admin/generateReport', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reportType, startDate, endDate, downloadFormat })
                }).then(response => {
                    const contentDisposition = response.headers.get('Content-Disposition');
                    const fileName = contentDisposition.split('filename=')[1].replace(/"/g, '');
                    return response.blob().then(blob => ({ blob, fileName }));
                })
                    .then(({ blob, fileName }) => {
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = fileName;
                        document.body.appendChild(a);
                        a.click();
                        a.remove();
                    })
                    .catch(error => console.error('Error generating report:', error));
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const ctx = document.getElementById('ordersChart').getContext('2d');
                let ordersChart;

                async function fetchAndRenderChart(period, filterType, startDate = '', endDate = '') {
                    try {
                        let url = `/admin/orderChart?period=${period}&filterType=${filterType}`;
                        if (period === 'custom') {
                            url += `&startDate=${startDate}&endDate=${endDate}`;
                        }

                        const response = await fetch(url);
                        const chartData = await response.json();

                        if (ordersChart) {
                            ordersChart.destroy();
                        }

                        const labels = filterType === 'orders'
                            ? ['Total Orders', 'Pending', 'Completed', 'Cancelled', 'Delivered']
                            : ['Total Sales', 'Pending', 'Completed', 'Cancelled', 'Delivered'];

                        const data = filterType === 'orders'
                            ? [
                                chartData.totalOrders,
                                chartData.orderStatus.pending || 0,
                                chartData.orderStatus.completed || 0,
                                chartData.orderStatus.cancelled || 0,
                                chartData.orderStatus.delivered || 0
                            ]
                            : [
                                chartData.totalAmount,
                                chartData.salesStatus.pending || 0,
                                chartData.salesStatus.completed || 0,
                                chartData.salesStatus.cancelled || 0,
                                chartData.salesStatus.delivered || 0
                            ];

                        ordersChart = new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: `${filterType === 'orders' ? 'Order' : 'Sales'} Statistics (${period})`,
                                    data: data,
                                    backgroundColor: ['#36a2eb', '#ffcd56', '#4bc0c0', '#ff6384', '#ff9f40'],
                                    borderColor: ['#36a2eb', '#ffcd56', '#4bc0c0', '#ff6384', '#ff9f40'],
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                scales: {
                                    y: {
                                        beginAtZero: true
                                    }
                                }
                            }
                        });
                    } catch (error) {
                        console.error("Error fetching chart data: ", error);
                    }
                }

                document.getElementById('time-period').addEventListener('change', function () {
                    var customDateRange = document.getElementById('custom-date-range');
                    customDateRange.style.display = this.value === 'custom' ? 'flex' : 'none';
                });

                document.getElementById('update-chart').addEventListener('click', () => {
                    const period = document.getElementById('time-period').value;
                    const filterType = document.getElementById('filter-type').value;
                    const startDate = document.getElementById('start-date').value;
                    const endDate = document.getElementById('end-date').value;

                    fetchAndRenderChart(period, filterType, startDate, endDate);
                });

                // Initial chart load
                fetchAndRenderChart('daily', 'orders');
            });
        </script>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Profit Chart context
        const ctxProfit = document.getElementById('profitChart').getContext('2d');
        let profitChart;

        // Function to fetch and render profit chart
        async function fetchAndRenderProfitChart(period, startDate = '', endDate = '') {
            try {
                let url = `/admin/orderProfitChart?period=${period}`;
                if (period === 'custom') {
                    url += `&startDate=${startDate}&endDate=${endDate}`;
                }

                const response = await fetch(url);
                const profitData = await response.json();

                if (profitChart) {
                    profitChart.destroy();
                }

                const labels = profitData.map(item => item.date);
                const profitValues = profitData.map(item => item.profit);

                profitChart = new Chart(ctxProfit, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: `Profit (${period})`,
                            data: profitValues,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } catch (error) {
                console.error("Error fetching profit chart data: ", error);
            }
        }

        // Event listener to update the profit chart based on period selection
        document.getElementById('update-profit-chart').addEventListener('click', () => {
            const period = document.getElementById('time-period').value;
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;

            fetchAndRenderProfitChart(period, startDate, endDate);
        });

        // Initial profit chart load
        fetchAndRenderProfitChart('daily');
    });
</script>

        </body>

        </html>